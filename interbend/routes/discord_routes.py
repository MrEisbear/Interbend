from webbrowser import get
from flask import Blueprint, make_response
from interbend.db import db, get_user
from interbend.auth import *
import mysql.connector
import auth  # For bot_key function
from werkzeug.security import generate_password_hash, check_password_hash

discord_bp = Blueprint('discord_bp', __name__)

@discord_bp.route('/register-id', methods=['POST'])
def register_id():
    data = request.get_json()
    bid = data.get('bid')
    name = data.get('name')
    origin = data.get('origin')
    age = data.get('age')
    gender = data.get('gender')
    bot_key2 = data.get('bot_key')
    if bot_key2 != current_app.config['BOT_KEY']:
        return jsonify({"error": "Unauthorized"}), 401
    if not bid or not name or not origin or not age or not gender:
        return jsonify({"error": "BID, name, origin, age, and gender are required"}), 400
    user = get_user(bid)
    if not user:
        return jsonify({"error": "User is not registered"}), 404
        # Should the user be automatically registered here?
    return jsonify({"error": "Method not implemented"}), 501

@discord_bp.route('/register-2', methods=['POST'])
def register2():
    data = request.get_json()
    bid = data.get('bid')
    # Bid is now generated by API -- Not in this case because this is for the discord bot to register users
    username = data.get('username')
    email = data.get('email')
    # This wont work because the bot wont have access to the email. Its a bot not OAuth, which will be added later.
    password = data.get('password') # The bot will generate a random password and send it to the user via DM or something?
    bot_key2 = data.get('bot_key')
    if not botKey(bot_key2):
        return jsonify({"error": "Unauthorized"}), 401

    if not username or not password:
        return jsonify({"error": "Bot error, did not supply username or password"}), 404
    password_hash = generate_password_hash(password)
    if email == "example@example.com":
        return jsonify({"error": "bro"}), 400
    bidf = "D-".join(bid)
    try:
        with db.cursor(dictionary=True) as cur:
            cur.execute("SELECT * FROM users WHERE bid = %s", (bidf,))
            if cur.fetchone():
                return jsonify({"error": "BID already exists."}), 409
    except mysql.connector.Error as err:
        db.rollback()
        current_app.logger.error(f"Database error in register: {err}")
        return jsonify({"error": "Database Error"}), 500
    try:
        with db.cursor(dictionary=True) as cur:
            cur.execute("INSERT INTO users (bid, username, password_hash) VALUES (%s, %s, %s)",
                          (bid, username, password_hash))
        db.commit()
        return jsonify({"message": "Creation Successful"}), 201
    except mysql.connector.Error as err:
        db.rollback()
        current_app.logger.error(f"Database error in register: {err}")
        return jsonify({"error": "Database Error"}), 500
    
@discord_bp.route('/balance', methods=['GET'])
def blo_chicken_tiki_masala(): #can I name it like this?
    return jsonify({"error": "use normal balance bro"}), 404